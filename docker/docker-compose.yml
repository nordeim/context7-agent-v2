# Context7 Agent v2.0 - Full Stack Deployment
# Supports both development and production environments

version: '3.8'

services:
  # Main Context7 Agent Service
  context7-agent:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: context7-agent-v2
    restart: unless-stopped
    
    # Environment configuration
    env_file:
      - .env.docker
    
    # Port mapping
    ports:
      - "8080:8080"  # Web interface (future)
    
    # Volume mounts
    volumes:
      - context7_data:/app/data
      - context7_logs:/app/logs
      - ./config:/app/config:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "from src.config import Config; Config.load()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    
    # Network configuration
    networks:
      - context7_network
    
    # Dependencies
    depends_on:
      - context7-mcp
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Context7 MCP Server
  context7-mcp:
    image: node:18-alpine
    container_name: context7-mcp-v2
    restart: unless-stopped
    
    # Health check for MCP server
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - context7_network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: context7-redis
    restart: unless-stopped
    
    # Redis configuration
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Port mapping (internal only)
    expose:
      - "6379"
    
    # Volume for Redis data
    volumes:
      - redis_data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - context7_network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Monitoring with Prometheus (advanced)
  prometheus:
    image: prom/prometheus:latest
    container_name: context7-prometheus
    restart: unless-stopped
    
    # Port mapping
    ports:
      - "9090:9090"
    
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    
    networks:
      - context7_network
    
    profiles:
      - monitoring

  # Optional: Grafana dashboard (advanced)
  grafana:
    image: grafana/grafana:latest
    container_name: context7-grafana
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    
    networks:
      - context7_network
    
    profiles:
      - monitoring

# Volume definitions
volumes:
  context7_data:
    driver: local
  context7_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network definitions
networks:
  context7_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Profiles for different environments
profiles:
  - dev
  - prod
  - monitoring
